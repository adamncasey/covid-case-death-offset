{"version":3,"sources":["index.js"],"names":["g_Chart","g_deathRawData","ENDPOINT_URL","fetchCaseData","fetch","fetchDeathData","applyDateOffset","rawData","dateOffset","offsetMs","data","map","d","x","y","console","log","normalisedDeathData","a","response","json","dataset","obj","Date","parse","date","value","push","parseInt","createDataset","dataPromise","casesDataset","document","getElementById","deathsDataset","ctx","getContext","Chart","datasets","label","yAxisID","type","backgroundColor","borderColor","pointRadius","fill","lineTension","borderWidth","options","animation","duration","scales","xAxes","distribution","offset","ticks","major","enabled","fontStyle","source","autoSkip","autoSkipPadding","maxRotation","sampleSize","yAxes","id","gridLines","drawBorder","scaleLabel","display","labelString","tooltips","intersect","mode","buildCaseGraph","addEventListener","days","update","innerText"],"mappings":"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","file":"static/js/main.67cd252e.chunk.js","sourcesContent":["import Chart from 'chart.js';\n\nlet g_deathRawData = [];\nlet g_Chart;\n\nconst ENDPOINT_URL = 'https://api.coronavirus.data.gov.uk/v1/data';\n\nfunction fetchCaseData() {\n    return fetch(ENDPOINT_URL + '?filters=areaType=overview&structure={\"date\":\"date\",\"value\":\"newCasesBySpecimenDate\"}');\n}\n\n\nfunction fetchDeathData() {\n    return fetch(ENDPOINT_URL + '?filters=areaType=nation&structure={\"date\":\"date\",\"value\":\"newDeathsByDeathDate\"}');\n}\n\n\nfunction applyDateOffset(rawData, dateOffset) {\n\n    let offsetMs = dateOffset * 24 * 60 * 60 * 1000;\n    let data = rawData.map(d => {\n        return {\n            x: d.x + offsetMs,\n            y: d.y\n        };\n    });\n\n    console.log(data);\n\n    return data;\n}\n\nasync function normalisedDeathData(dateOffset) {\n    let response = await fetchDeathData();\n\n    console.log(response);\n\n    let json = await response.json();\n\n    console.log(json);\n\n    let dataset = {};\n\n    for (let obj of json.data) {\n        let d = Date.parse(obj.date);\n        dataset[d] = (dataset[d] || 0) + obj.value;\n    }\n\n    let rawData = [];\n    for (let date in dataset) {\n        rawData.push({ x: parseInt(date), y: dataset[date] });\n    }\n\n    g_deathRawData = rawData;\n\n    let data = applyDateOffset(g_deathRawData, dateOffset);\n\n    return data;\n}\n\nasync function createDataset(dataPromise) {\n    let response = await dataPromise;\n\n    console.log(response);\n\n    let json = await response.json();\n\n    console.log(json);\n\n    return json.data.map(obj => {\n        return {\n            x: Date.parse(obj.date),\n            y: obj.value\n        }\n    });\n}\n\n\nasync function buildCaseGraph() {\n    let casesDataset = await createDataset(fetchCaseData());\n\n    console.log(casesDataset);\n    let deathsDataset = await normalisedDeathData(document.getElementById(\"deathDateOffset\").value);\n\n    let ctx = document.getElementById(\"chart1\").getContext('2d');\n    g_Chart = new Chart(ctx, {\n        data: {\n            datasets: [{\n                label: 'Cases',\n                yAxisID: 'Cases',\n                type: 'line',\n                data: casesDataset,\n                backgroundColor: '#f00',\n                borderColor: '#f00',\n                pointRadius: 0,\n                fill: false,\n                lineTension: 0,\n                borderWidth: 2\n            },\n            {\n                label: 'Deaths',\n                yAxisID: 'Deaths',\n                type: 'line',\n                data: deathsDataset,\n                backgroundColor: '#0f0',\n                borderColor: '#0f0',\n                pointRadius: 0,\n                fill: false,\n                lineTension: 0,\n                borderWidth: 2\n            }]\n        },\n        options: {\n            animation: {\n                duration: 0\n            },\n            scales: {\n                xAxes: [{\n                    type: 'time',\n                    distribution: 'series',\n                    offset: true,\n                    ticks: {\n                        major: {\n                            enabled: true,\n                            fontStyle: 'bold'\n                        },\n                        source: 'data',\n                        autoSkip: true,\n                        autoSkipPadding: 75,\n                        maxRotation: 0,\n                        sampleSize: 100\n                    },\n                }],\n                yAxes: [{\n                    id: 'Cases',\n                    gridLines: {\n                        drawBorder: false\n                    },\n                    scaleLabel: {\n                        display: true,\n                        labelString: 'Cases'\n                    }\n                }, {\n                    id: 'Deaths',\n                    gridLines: {\n                        drawBorder: false\n                    },\n                    scaleLabel: {\n                        display: true,\n                        labelString: 'Deaths'\n                    }\n                }]\n            },\n            tooltips: {\n                intersect: false,\n                mode: 'index',\n            }\n        }\n    });\n\n}\n\nbuildCaseGraph();\n\ndocument.getElementById(\"deathDateOffset\").addEventListener(\"input\", () => {\n    let days = document.getElementById(\"deathDateOffset\").value;\n\n    console.log(g_Chart.data.datasets[1]);\n    g_Chart.data.datasets[1].data = applyDateOffset(g_deathRawData, days);\n    g_Chart.update();\n\n    document.getElementById(\"deathDateOffsetValue\").innerText = days + \" days\";\n});"],"sourceRoot":""}